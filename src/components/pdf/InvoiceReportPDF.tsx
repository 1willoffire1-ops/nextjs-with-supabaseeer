import React from 'react';
import {
  Document,
  Page,
  Text,
  View,
} from '@react-pdf/renderer';
import { 
  InvoiceReportData, 
  PDFExportOptions,
  PDFStyleConfig 
} from './types';
import {
  createPDFStyles,
  formatCurrency,
  formatNumber,
  formatDate,
  formatPercentage,
  createTableData,
} from './utils';

interface InvoiceReportPDFProps {
  data: InvoiceReportData;
  options?: PDFExportOptions;
  style?: Partial<PDFStyleConfig>;
}

export const InvoiceReportPDF: React.FC<InvoiceReportPDFProps> = ({
  data,
  options = {},
  style = {},
}) => {
  const styles = createPDFStyles(style);
  const { meta, summary, invoices, errors } = data;

  // Create table data for invoices
  const invoiceTableData = createTableData(invoices, [
    {
      key: 'invoice_id',
      header: 'Invoice ID',
      width: '15%',
    },
    {
      key: 'date',
      header: 'Date',
      width: '12%',
      formatter: (value) => formatDate(value),
    },
    {
      key: 'customer_name',
      header: 'Customer',
      width: '20%',
    },
    {
      key: 'customer_country',
      header: 'Country',
      width: '8%',
    },
    {
      key: 'net_amount',
      header: 'Net Amount',
      width: '12%',
      formatter: (value) => formatCurrency(value || 0),
    },
    {
      key: 'vat_rate_percent',
      header: 'VAT Rate',
      width: '8%',
      formatter: (value) => `${value}%`,
    },
    {
      key: 'vat_amount',
      header: 'VAT Amount',
      width: '12%',
      formatter: (value) => formatCurrency(value || 0),
    },
    {
      key: 'total',
      header: 'Total',
      width: '13%',
      formatter: (value, row) => formatCurrency((row.net_amount || 0) + (row.vat_amount || 0)),
    },
  ]);

  const renderHeader = () => (
    <View style={styles.header}>
      <Text style={styles.logo}>VATANA</Text>
      <View>
        <Text style={[styles.subtitle, { textAlign: 'right' }]}>
          {formatDate(meta.generatedAt)}
        </Text>
        <Text style={[styles.subtitle, { textAlign: 'right', fontSize: 10 }]}>
          Generated by: {meta.generatedBy}
        </Text>
      </View>
    </View>
  );

  const renderSummarySection = () => (
    <View style={styles.section}>
      <Text style={styles.title}>Invoice Summary</Text>
      
      <View style={styles.row}>
        <View style={[styles.summaryCard, { flex: 1, marginRight: 8 }]}>
          <Text style={styles.metricValue}>{formatNumber(summary.totalInvoices)}</Text>
          <Text style={styles.metricLabel}>Total Invoices</Text>
        </View>
        
        <View style={[styles.summaryCard, { flex: 1, marginRight: 8 }]}>
          <Text style={styles.metricValue}>
            {formatCurrency(summary.totalNetAmount)}
          </Text>
          <Text style={styles.metricLabel}>Total Net Amount</Text>
        </View>
        
        <View style={[styles.summaryCard, { flex: 1, marginRight: 8 }]}>
          <Text style={styles.metricValue}>
            {formatCurrency(summary.totalVATAmount)}
          </Text>
          <Text style={styles.metricLabel}>Total VAT Amount</Text>
        </View>
        
        <View style={[styles.summaryCard, { flex: 1 }]}>
          <Text style={[styles.metricValue, { color: '#10b981' }]}>
            {formatCurrency(summary.totalGrossAmount)}
          </Text>
          <Text style={styles.metricLabel}>Total Gross Amount</Text>
        </View>
      </View>

      {/* Secondary metrics */}
      <View style={styles.row}>
        <View style={[styles.summaryCard, { flex: 1, marginRight: 8 }]}>
          <Text style={styles.metricValue}>
            {formatCurrency(summary.averageInvoiceValue)}
          </Text>
          <Text style={styles.metricLabel}>Average Invoice Value</Text>
        </View>
        
        {errors && errors.length > 0 && (
          <View style={[styles.summaryCard, { flex: 1, marginRight: 8 }]}>
            <Text style={[styles.metricValue, { color: '#ef4444' }]}>
              {formatNumber(errors.length)}
            </Text>
            <Text style={styles.metricLabel}>Invoices with Errors</Text>
          </View>
        )}
      </View>

      {/* Country Breakdown */}
      <View style={[styles.summaryCard, { marginTop: 16 }]}>
        <Text style={[styles.subtitle, { marginBottom: 8 }]}>Invoices by Country</Text>
        {Object.entries(summary.invoicesByCountry).map(([country, count]) => (
          <View key={country} style={[styles.row, { justifyContent: 'space-between', marginBottom: 4 }]}>
            <Text style={{ fontSize: 9 }}>{country}</Text>
            <Text style={{ fontSize: 9, fontFamily: 'Helvetica-Bold' }}>{count}</Text>
          </View>
        ))}
      </View>

      {/* VAT Rate Breakdown */}
      <View style={[styles.summaryCard, { marginTop: 8 }]}>
        <Text style={[styles.subtitle, { marginBottom: 8 }]}>Invoices by VAT Rate</Text>
        {Object.entries(summary.invoicesByVATRate).map(([rate, count]) => (
          <View key={rate} style={[styles.row, { justifyContent: 'space-between', marginBottom: 4 }]}>
            <Text style={{ fontSize: 9 }}>{rate}%</Text>
            <Text style={{ fontSize: 9, fontFamily: 'Helvetica-Bold' }}>{count}</Text>
          </View>
        ))}
      </View>
    </View>
  );

  const renderInvoicesTable = () => (
    <View style={styles.section}>
      <Text style={styles.title}>Invoice Details</Text>
      
      <View style={styles.table}>
        {/* Table Header */}
        <View style={[styles.tableRow, styles.tableHeader]}>
          {invoiceTableData.headers.map((header, index) => (
            <Text key={index} style={styles.tableCell}>
              {header}
            </Text>
          ))}
        </View>
        
        {/* Table Rows */}
        {invoiceTableData.rows.map((row, rowIndex) => (
          <View key={rowIndex} style={styles.tableRow}>
            {row.map((cell, cellIndex) => (
              <Text key={cellIndex} style={styles.tableCell}>
                {cell}
              </Text>
            ))}
          </View>
        ))}
      </View>
    </View>
  );

  const renderTotalsSummary = () => (
    <View style={styles.section}>
      <Text style={styles.title}>Totals Summary</Text>
      
      <View style={[styles.summaryCard, { padding: 16 }]}>
        <View style={[styles.row, { justifyContent: 'space-between', marginBottom: 8 }]}>
          <Text style={[styles.subtitle, { fontSize: 12 }]}>Net Amount:</Text>
          <Text style={[styles.subtitle, { fontSize: 12 }]}>
            {formatCurrency(summary.totalNetAmount)}
          </Text>
        </View>
        
        <View style={[styles.row, { justifyContent: 'space-between', marginBottom: 8 }]}>
          <Text style={[styles.subtitle, { fontSize: 12 }]}>VAT Amount:</Text>
          <Text style={[styles.subtitle, { fontSize: 12 }]}>
            {formatCurrency(summary.totalVATAmount)}
          </Text>
        </View>
        
        <View 
          style={[
            styles.row, 
            { 
              justifyContent: 'space-between', 
              paddingTop: 8, 
              borderTopWidth: 1, 
              borderTopColor: '#e5e7eb' 
            }
          ]}
        >
          <Text style={[styles.metricValue, { fontSize: 14 }]}>Total Amount:</Text>
          <Text style={[styles.metricValue, { fontSize: 14, color: '#10b981' }]}>
            {formatCurrency(summary.totalGrossAmount)}
          </Text>
        </View>
      </View>
    </View>
  );

  const renderFooter = () => (
    <Text
      style={styles.footer}
      render={({ pageNumber, totalPages }) =>
        `${meta.companyName} | Invoice Report | Page ${pageNumber} of ${totalPages}`
      }
      fixed
    />
  );

  return (
    <Document>
      <Page size={options.format || 'A4'} style={styles.page} orientation={options.orientation}>
        {renderHeader()}
        
        <View style={styles.section}>
          <Text style={styles.title}>{meta.title}</Text>
          {meta.period && (
            <Text style={styles.subtitle}>Period: {meta.period}</Text>
          )}
          <Text style={styles.subtitle}>Company: {meta.companyName}</Text>
        </View>

        {renderSummarySection()}
        {options.includeDetails !== false && renderInvoicesTable()}
        {renderTotalsSummary()}
        {renderFooter()}
      </Page>
    </Document>
  );
};

export default InvoiceReportPDF;