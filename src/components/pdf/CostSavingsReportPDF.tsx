import React from 'react';
import {
  Document,
  Page,
  Text,
  View,
} from '@react-pdf/renderer';
import { 
  CostSavingsReportData, 
  PDFExportOptions,
  PDFStyleConfig 
} from './types';
import {
  createPDFStyles,
  formatCurrency,
  formatNumber,
  formatDate,
  formatPercentage,
  createTableData,
} from './utils';

interface CostSavingsReportPDFProps {
  data: CostSavingsReportData;
  options?: PDFExportOptions;
  style?: Partial<PDFStyleConfig>;
}

export const CostSavingsReportPDF: React.FC<CostSavingsReportPDFProps> = ({
  data,
  options = {},
  style = {},
}) => {
  const styles = createPDFStyles(style);
  const { meta, summary, costSavings, monthlyBreakdown } = data;

  // Create table data for cost savings details
  const savingsTableData = createTableData(costSavings, [
    {
      key: 'period',
      header: 'Period',
      width: '15%',
    },
    {
      key: 'total_errors_fixed',
      header: 'Errors Fixed',
      width: '12%',
      formatter: (value) => formatNumber(value || 0),
    },
    {
      key: 'total_penalty_avoided',
      header: 'Penalty Avoided',
      width: '15%',
      formatter: (value) => formatCurrency(value || 0),
    },
    {
      key: 'processing_time_saved_hours',
      header: 'Time Saved (hrs)',
      width: '13%',
      formatter: (value) => formatNumber(value || 0),
    },
    {
      key: 'vatana_cost',
      header: 'Vatana Cost',
      width: '13%',
      formatter: (value) => formatCurrency(value || 0),
    },
    {
      key: 'net_savings',
      header: 'Net Savings',
      width: '15%',
      formatter: (value) => formatCurrency(value || 0),
    },
    {
      key: 'roi_percentage',
      header: 'ROI',
      width: '10%',
      formatter: (value) => formatPercentage((value || 0) / 100),
    },
  ]);

  // Create monthly breakdown table
  const monthlyTableData = createTableData(monthlyBreakdown, [
    {
      key: 'month',
      header: 'Month',
      width: '25%',
    },
    {
      key: 'errorsFixed',
      header: 'Errors Fixed',
      width: '20%',
      formatter: (value) => formatNumber(value || 0),
    },
    {
      key: 'penaltyAvoided',
      header: 'Penalty Avoided',
      width: '25%',
      formatter: (value) => formatCurrency(value || 0),
    },
    {
      key: 'savings',
      header: 'Net Savings',
      width: '30%',
      formatter: (value) => formatCurrency(value || 0),
    },
  ]);

  const renderHeader = () => (
    <View style={styles.header}>
      <Text style={styles.logo}>VATANA</Text>
      <View>
        <Text style={[styles.subtitle, { textAlign: 'right' }]}>
          {formatDate(meta.generatedAt)}
        </Text>
        <Text style={[styles.subtitle, { textAlign: 'right', fontSize: 10 }]}>
          Generated by: {meta.generatedBy}
        </Text>
      </View>
    </View>
  );

  const renderExecutiveSummary = () => (
    <View style={styles.section}>
      <Text style={styles.title}>Executive Summary</Text>
      
      <View style={styles.row}>
        <View style={[styles.summaryCard, { flex: 1, marginRight: 8 }]}>
          <Text style={[styles.metricValue, { color: '#10b981' }]}>
            {formatCurrency(summary.totalSavings)}
          </Text>
          <Text style={styles.metricLabel}>Total Cost Savings</Text>
        </View>
        
        <View style={[styles.summaryCard, { flex: 1, marginRight: 8 }]}>
          <Text style={styles.metricValue}>
            {formatNumber(summary.totalErrorsFixed)}
          </Text>
          <Text style={styles.metricLabel}>Total Errors Fixed</Text>
        </View>
        
        <View style={[styles.summaryCard, { flex: 1, marginRight: 8 }]}>
          <Text style={[styles.metricValue, { color: '#f59e0b' }]}>
            {formatCurrency(summary.totalPenaltyAvoided)}
          </Text>
          <Text style={styles.metricLabel}>Total Penalty Avoided</Text>
        </View>
        
        <View style={[styles.summaryCard, { flex: 1 }]}>
          <Text style={[styles.metricValue, { color: '#2563eb' }]}>
            {formatPercentage(summary.roi / 100)}
          </Text>
          <Text style={styles.metricLabel}>Average ROI</Text>
        </View>
      </View>

      <View style={styles.row}>
        <View style={[styles.summaryCard, { flex: 1, marginRight: 8 }]}>
          <Text style={styles.metricValue}>
            {formatNumber(summary.processingTimeSaved)}
          </Text>
          <Text style={styles.metricLabel}>Processing Time Saved (hours)</Text>
        </View>
        
        <View style={[styles.summaryCard, { flex: 1 }]}>
          <Text style={styles.metricValue}>
            {formatPercentage(
              summary.autofixVsManual.autofix / 
              (summary.autofixVsManual.autofix + summary.autofixVsManual.manual)
            )}
          </Text>
          <Text style={styles.metricLabel}>Auto-fix Success Rate</Text>
        </View>
      </View>

      {/* Key Insights */}
      <View style={[styles.summaryCard, { marginTop: 16, padding: 16 }]}>
        <Text style={[styles.subtitle, { marginBottom: 12, color: '#2563eb' }]}>Key Insights</Text>
        
        <View style={{ marginBottom: 8 }}>
          <Text style={{ fontSize: 10, marginBottom: 4, fontFamily: 'Helvetica-Bold' }}>
            • Cost Efficiency Analysis
          </Text>
          <Text style={{ fontSize: 9, color: '#6b7280', marginLeft: 12 }}>
            Average savings of {formatCurrency(summary.totalSavings / (costSavings.length || 1))} per reporting period
          </Text>
        </View>

        <View style={{ marginBottom: 8 }}>
          <Text style={{ fontSize: 10, marginBottom: 4, fontFamily: 'Helvetica-Bold' }}>
            • Automation Impact
          </Text>
          <Text style={{ fontSize: 9, color: '#6b7280', marginLeft: 12 }}>
            {summary.autofixVsManual.autofix} errors fixed automatically vs {summary.autofixVsManual.manual} requiring manual intervention
          </Text>
        </View>

        <View>
          <Text style={{ fontSize: 10, marginBottom: 4, fontFamily: 'Helvetica-Bold' }}>
            • Time Value
          </Text>
          <Text style={{ fontSize: 9, color: '#6b7280', marginLeft: 12 }}>
            Saved approximately {formatNumber(summary.processingTimeSaved)} hours of manual processing time
          </Text>
        </View>
      </View>
    </View>
  );

  const renderMonthlyBreakdown = () => (
    <View style={styles.section}>
      <Text style={styles.title}>Monthly Performance</Text>
      
      <View style={styles.table}>
        {/* Table Header */}
        <View style={[styles.tableRow, styles.tableHeader]}>
          {monthlyTableData.headers.map((header, index) => (
            <Text key={index} style={styles.tableCell}>
              {header}
            </Text>
          ))}
        </View>
        
        {/* Table Rows */}
        {monthlyTableData.rows.map((row, rowIndex) => (
          <View key={rowIndex} style={styles.tableRow}>
            {row.map((cell, cellIndex) => (
              <Text 
                key={cellIndex} 
                style={[
                  styles.tableCell,
                  // Highlight savings column
                  cellIndex === 3 ? { color: '#10b981', fontFamily: 'Helvetica-Bold' } : {}
                ]}
              >
                {cell}
              </Text>
            ))}
          </View>
        ))}
      </View>
    </View>
  );

  const renderDetailedSavings = () => (
    <View style={styles.section}>
      <Text style={styles.title}>Detailed Cost Savings</Text>
      
      <View style={styles.table}>
        {/* Table Header */}
        <View style={[styles.tableRow, styles.tableHeader]}>
          {savingsTableData.headers.map((header, index) => (
            <Text key={index} style={styles.tableCell}>
              {header}
            </Text>
          ))}
        </View>
        
        {/* Table Rows */}
        {savingsTableData.rows.map((row, rowIndex) => (
          <View key={rowIndex} style={styles.tableRow}>
            {row.map((cell, cellIndex) => (
              <Text 
                key={cellIndex} 
                style={[
                  styles.tableCell,
                  // Highlight net savings and ROI columns
                  cellIndex === 5 || cellIndex === 6 ? 
                    { color: '#10b981', fontFamily: 'Helvetica-Bold' } : {}
                ]}
              >
                {cell}
              </Text>
            ))}
          </View>
        ))}
      </View>
    </View>
  );

  const renderROIAnalysis = () => (
    <View style={styles.section}>
      <Text style={styles.title}>Return on Investment Analysis</Text>
      
      <View style={[styles.summaryCard, { padding: 16 }]}>
        <Text style={[styles.subtitle, { marginBottom: 12 }]}>Investment Summary</Text>
        
        <View style={[styles.row, { justifyContent: 'space-between', marginBottom: 8 }]}>
          <Text style={{ fontSize: 10 }}>Total Vatana Investment:</Text>
          <Text style={{ fontSize: 10, fontFamily: 'Helvetica-Bold' }}>
            {formatCurrency(costSavings.reduce((sum, cs) => sum + (cs.vatana_cost || 0), 0))}
          </Text>
        </View>
        
        <View style={[styles.row, { justifyContent: 'space-between', marginBottom: 8 }]}>
          <Text style={{ fontSize: 10 }}>Traditional Method Cost:</Text>
          <Text style={{ fontSize: 10, fontFamily: 'Helvetica-Bold' }}>
            {formatCurrency(costSavings.reduce((sum, cs) => sum + (cs.traditional_method_cost || 0), 0))}
          </Text>
        </View>
        
        <View style={[styles.row, { justifyContent: 'space-between', marginBottom: 12, paddingTop: 8, borderTopWidth: 1, borderTopColor: '#e5e7eb' }]}>
          <Text style={[styles.subtitle, { fontSize: 12 }]}>Net Cost Savings:</Text>
          <Text style={[styles.metricValue, { fontSize: 14, color: '#10b981' }]}>
            {formatCurrency(summary.totalSavings)}
          </Text>
        </View>

        <View style={[styles.row, { justifyContent: 'space-between' }]}>
          <Text style={[styles.subtitle, { fontSize: 12 }]}>Overall ROI:</Text>
          <Text style={[styles.metricValue, { fontSize: 14, color: '#2563eb' }]}>
            {formatPercentage(summary.roi / 100)}
          </Text>
        </View>
      </View>
    </View>
  );

  const renderFooter = () => (
    <Text
      style={styles.footer}
      render={({ pageNumber, totalPages }) =>
        `${meta.companyName} | Cost Savings Report | Page ${pageNumber} of ${totalPages}`
      }
      fixed
    />
  );

  return (
    <Document>
      <Page size={options.format || 'A4'} style={styles.page}>
        {renderHeader()}
        
        <View style={styles.section}>
          <Text style={styles.title}>{meta.title}</Text>
          {meta.period && (
            <Text style={styles.subtitle}>Period: {meta.period}</Text>
          )}
          <Text style={styles.subtitle}>Company: {meta.companyName}</Text>
        </View>

        {renderExecutiveSummary()}
        {renderMonthlyBreakdown()}
        {options.includeDetails !== false && renderDetailedSavings()}
        {renderROIAnalysis()}
        {renderFooter()}
      </Page>
    </Document>
  );
};

export default CostSavingsReportPDF;