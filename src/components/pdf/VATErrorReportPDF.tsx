import React from 'react';
import {
  Document,
  Page,
  Text,
  View,
  StyleSheet,
} from '@react-pdf/renderer';
import { 
  VATErrorReportData, 
  PDFExportOptions,
  PDFStyleConfig 
} from './types';
import {
  createPDFStyles,
  formatCurrency,
  formatNumber,
  formatDate,
  getSeverityStyle,
  createTableData,
} from './utils';

interface VATErrorReportPDFProps {
  data: VATErrorReportData;
  options?: PDFExportOptions;
  style?: Partial<PDFStyleConfig>;
}

export const VATErrorReportPDF: React.FC<VATErrorReportPDFProps> = ({
  data,
  options = {},
  style = {},
}) => {
  const styles = createPDFStyles(style);
  const { meta, summary, errors } = data;

  // Create table data for errors
  const errorTableData = createTableData(errors, [
    {
      key: 'error_type',
      header: 'Error Type',
      width: '20%',
    },
    {
      key: 'severity',
      header: 'Severity',
      width: '10%',
    },
    {
      key: 'message',
      header: 'Description',
      width: '35%',
    },
    {
      key: 'penalty_risk_eur',
      header: 'Penalty Risk',
      width: '15%',
      formatter: (value) => formatCurrency(value || 0),
    },
    {
      key: 'auto_fixable',
      header: 'Auto-Fix',
      width: '10%',
      formatter: (value) => value ? 'Yes' : 'No',
    },
    {
      key: 'invoice',
      header: 'Invoice ID',
      width: '10%',
      formatter: (value) => value?.invoice_id || 'N/A',
    },
  ]);

  const renderHeader = () => (
    <View style={styles.header}>
      <Text style={styles.logo}>VATANA</Text>
      <View>
        <Text style={[styles.subtitle, { textAlign: 'right' }]}>
          {formatDate(meta.generatedAt)}
        </Text>
        <Text style={[styles.subtitle, { textAlign: 'right', fontSize: 10 }]}>
          Generated by: {meta.generatedBy}
        </Text>
      </View>
    </View>
  );

  const renderSummarySection = () => (
    <View style={styles.section}>
      <Text style={styles.title}>VAT Error Analysis Summary</Text>
      
      <View style={styles.row}>
        <View style={[styles.summaryCard, { flex: 1, marginRight: 8 }]}>
          <Text style={styles.metricValue}>{formatNumber(summary.totalErrors)}</Text>
          <Text style={styles.metricLabel}>Total Errors Found</Text>
        </View>
        
        <View style={[styles.summaryCard, { flex: 1, marginRight: 8 }]}>
          <Text style={[styles.metricValue, { color: '#ef4444' }]}>
            {formatNumber(summary.criticalErrors)}
          </Text>
          <Text style={styles.metricLabel}>Critical Errors</Text>
        </View>
        
        <View style={[styles.summaryCard, { flex: 1, marginRight: 8 }]}>
          <Text style={[styles.metricValue, { color: '#10b981' }]}>
            {formatNumber(summary.autoFixableErrors)}
          </Text>
          <Text style={styles.metricLabel}>Auto-Fixable</Text>
        </View>
        
        <View style={[styles.summaryCard, { flex: 1 }]}>
          <Text style={[styles.metricValue, { color: '#f59e0b' }]}>
            {formatCurrency(summary.totalPenaltyRisk)}
          </Text>
          <Text style={styles.metricLabel}>Total Penalty Risk</Text>
        </View>
      </View>

      {/* Error Breakdown by Type */}
      <View style={[styles.summaryCard, { marginTop: 16 }]}>
        <Text style={[styles.subtitle, { marginBottom: 8 }]}>Error Breakdown by Type</Text>
        {Object.entries(summary.errorsByType).map(([type, count]) => (
          <View key={type} style={[styles.row, { justifyContent: 'space-between', marginBottom: 4 }]}>
            <Text style={{ fontSize: 9 }}>{type}</Text>
            <Text style={{ fontSize: 9, fontFamily: 'Helvetica-Bold' }}>{count}</Text>
          </View>
        ))}
      </View>

      {/* Error Breakdown by Severity */}
      <View style={[styles.summaryCard, { marginTop: 8 }]}>
        <Text style={[styles.subtitle, { marginBottom: 8 }]}>Error Breakdown by Severity</Text>
        {Object.entries(summary.errorsBySeverity).map(([severity, count]) => (
          <View key={severity} style={[styles.row, { justifyContent: 'space-between', marginBottom: 4 }]}>
            <Text style={[{ fontSize: 9 }, getSeverityStyle(severity)]}>{severity.toUpperCase()}</Text>
            <Text style={{ fontSize: 9, fontFamily: 'Helvetica-Bold' }}>{count}</Text>
          </View>
        ))}
      </View>
    </View>
  );

  const renderErrorsTable = () => (
    <View style={styles.section}>
      <Text style={styles.title}>Detailed Error List</Text>
      
      <View style={styles.table}>
        {/* Table Header */}
        <View style={[styles.tableRow, styles.tableHeader]}>
          {errorTableData.headers.map((header, index) => (
            <Text key={index} style={styles.tableCell}>
              {header}
            </Text>
          ))}
        </View>
        
        {/* Table Rows */}
        {errorTableData.rows.map((row, rowIndex) => (
          <View key={rowIndex} style={styles.tableRow}>
            {row.map((cell, cellIndex) => (
              <Text
                key={cellIndex}
                style={[
                  styles.tableCell,
                  // Apply severity styling to severity column
                  cellIndex === 1 ? getSeverityStyle(errors[rowIndex].severity || '') : {},
                ]}
              >
                {cell}
              </Text>
            ))}
          </View>
        ))}
      </View>
    </View>
  );

  const renderFooter = () => (
    <Text
      style={styles.footer}
      render={({ pageNumber, totalPages }) =>
        `${meta.companyName} | VAT Error Report | Page ${pageNumber} of ${totalPages}`
      }
      fixed
    />
  );

  return (
    <Document>
      <Page size={options.format || 'A4'} style={styles.page}>
        {renderHeader()}
        
        <View style={styles.section}>
          <Text style={styles.title}>{meta.title}</Text>
          {meta.period && (
            <Text style={styles.subtitle}>Period: {meta.period}</Text>
          )}
          <Text style={styles.subtitle}>Company: {meta.companyName}</Text>
        </View>

        {renderSummarySection()}
        {renderErrorsTable()}
        {renderFooter()}
      </Page>
    </Document>
  );
};

export default VATErrorReportPDF;